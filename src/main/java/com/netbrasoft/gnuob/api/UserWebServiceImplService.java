package com.netbrasoft.gnuob.api;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.1.2-jbossorg-2 2015-11-08T14:18:37.035+01:00 Generated
 * source version: 3.1.2-jbossorg-2
 *
 */
@WebServiceClient(name = "UserWebServiceImplService", wsdlLocation = "http://localhost:8080/gnuob-soap/UserWebServiceImpl?wsdl", targetNamespace = "http://gnuob.netbrasoft.com/")
public class UserWebServiceImplService extends Service {

  public final static URL WSDL_LOCATION;

  public final static QName SERVICE = new QName("http://gnuob.netbrasoft.com/", "UserWebServiceImplService");
  public final static QName UserWebServiceImplPort = new QName("http://gnuob.netbrasoft.com/", "UserWebServiceImplPort");

  static {
    URL url = null;
    try {
      url = new URL("http://localhost:8080/gnuob-soap/UserWebServiceImpl?wsdl");
    } catch (final MalformedURLException e) {
      java.util.logging.Logger.getLogger(UserWebServiceImplService.class.getName()).log(java.util.logging.Level.INFO, "Can not initialize the default wsdl from {0}",
          "http://localhost:8080/gnuob-soap/UserWebServiceImpl?wsdl");
    }
    WSDL_LOCATION = url;
  }

  public UserWebServiceImplService() {
    super(WSDL_LOCATION, SERVICE);
  }

  public UserWebServiceImplService(final URL wsdlLocation) {
    super(wsdlLocation, SERVICE);
  }

  public UserWebServiceImplService(final URL wsdlLocation, final QName serviceName) {
    super(wsdlLocation, serviceName);
  }

  public UserWebServiceImplService(final URL wsdlLocation, final QName serviceName, final WebServiceFeature... features) {
    super(wsdlLocation, serviceName, features);
  }

  public UserWebServiceImplService(final URL wsdlLocation, final WebServiceFeature... features) {
    super(wsdlLocation, SERVICE, features);
  }

  public UserWebServiceImplService(final WebServiceFeature... features) {
    super(WSDL_LOCATION, SERVICE, features);
  }



  /**
   *
   * @return returns UserWebServiceImpl
   */
  @WebEndpoint(name = "UserWebServiceImplPort")
  public UserWebServiceImpl getUserWebServiceImplPort() {
    return super.getPort(UserWebServiceImplPort, UserWebServiceImpl.class);
  }

  /**
   * 
   * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.
   *        Supported features not in the <code>features</code> parameter will have their default
   *        values.
   * @return returns UserWebServiceImpl
   */
  @WebEndpoint(name = "UserWebServiceImplPort")
  public UserWebServiceImpl getUserWebServiceImplPort(final WebServiceFeature... features) {
    return super.getPort(UserWebServiceImplPort, UserWebServiceImpl.class, features);
  }

}
